Apart from securing our microservices, we should also think about how to have a single or centralized
identity and access management component.
application that an organization develops, they can leverage these Oauth2 specifications to secure their applications.
Basic Authentication: the authentication will be completed and after the successful authentication, the
backend server is going to generate a session value and the same it is going to store inside a cookie of the browser.
So as long as the session is active, the user can access the any protected resources and URLs.
The drawbacks of this approach is backend server will have both business logic and authentication logic tightly coupled.
Moreover, this approach is not mobile friendly or REST API friendly.
it does not have a proper solution to grant temporary access to your information to the third party clients
Whereas in Oauth2 framework, we have a proper solution on how to temporarily grant access to the Google photo
Oauth2 recommendation, they separated all the authentication and authorization logic into a separate component called authorization server or authentication server.
the Google products, they are going to send the credentials of the end user to the same auth server
GitHub is trying to give a temporary access token with a limited access to the StackOverflow.
OAuth stands for Open authorization. It is a free and open source protocol built on IETF standards
right now the authors of OAuth2 is trying to build a newer version with the name OAuth 2.1.
The process of granting permissions are concerned to third party applications are often referred to as authorization
For all these applications and scenarios, there are different, different grant flows available inside the Oauth2 framework.
if two backend servers are trying to communicate, then we have a grant flow specific to that scenario.
Whereas a UI application or a mobile application is trying to communicate with a backend server, then there is a separate grant flow for it.
OAuth2 we have to build a separate component with the name authorization server and this authorization
server is responsible to receive the request from the clients and provide access token based upon the successful authentication.
So who is this resource owner?Usually the resource owner is the end user inside the stack overflow scenario
I want to log in with the help of my GitHub details. So I own the resources inside the GitHub server,
like my email address, my display name.
So all those details are belongs to me.  Since I want to share my resources to the third party application
by proving my identity with the authentication server of GitHub,  the end user who owns the resources we call him as an resource owner.
In the Stack overflow scenario, the resources can be my email address or my profile details.
Client:This client is the website or mobile application or an API who want to access the secured resources
on behalf of the resource owner. In the scenario of StackOverflow, the StackOverflow website, they want to interact with the GitHub
Authorization Server.: This is the component at the server which knows about the resource owner.
resource owner should have an account in this server. Suppose in the case of StackOverflow, I as a resource owner should have an account inside the GitHub
 we can never use authorization server if we don't register our details with it.
 So what is the authorization server in the scenario of StackOverflow, the GitHub server which is responsible
 to authenticate the end user at the resource owner, we call that server as authorization server.
  Resource Server.: This is the server where the resources of the resource owner are stored.
  Usually inside enterprise organizations like GitHub, Google or Facebook or any other organizations,
  they will have separate servers handling the authentication and storing the resources of the end user.

 once the authentication is successful, my authorization server is going to issue an access token to the client
 Using the same access token, the client application is going to send a request behind the scenes to the resource server.
 If the resource server is satisfied with the validity of the access token, then it is going to give the resources of the resource owner.
 Like in the stack overflow scenario, the resource will be my email details, my basic details like my display name.

 scopes.: These are the granular permissions the client wants, such as access to a data or to perform certain actions.
 The auth server can issue an access token to client based upon the scopes. These scopes decide what actions the client application can perform.
 GitHub might have issued a scope to the client application to read my email details and basic details.
 So whenever an access token issued by the authorization server, it is going to construct the scopes.
 So with this access token, my client application can interact with the resource server and it can only
 perform the actions based upon the privileges defined by the scope.

 The primary reason why the OAuth two specification built is, to support the authorization but not the authentication.
 With the help of authentication, we can only authenticate the end user whether he is a legitimate user by validating his credentials.
  a lot many organizations, they found a way to use the OAuth2 framework for authentication as well.
  This OpenID Connect framework, which built on top of the OAuth2.
  It provides authentication by introducing a new ID token, and these ID token contains a set of information about the end user or about the resource owner.
  Http protocol is a base protocol for all the communication inside the web. On top of these Http protocol
  oauth2 framework is built and this OAuth2 framework is going to support authorization.
  On top of this over to framework, there is a small wrapper framework built which is OpenID Connect, and this OpenID Connect is going to support authentication.
  And with this OpenID Connect, we can easily identify the identity details of the end user.
  So by combining both of these two standards, a new concept came into picture, which is IAM Identity and Access Management.
  The short form of OpenID Connect is OIDC
  It is going to follow the same standards like Access Token, both these access token and ID token.
  They are going to use the JWT standard, which is Json web token standard.
  Keyclock is an open source identity and access management product.
  Okta is very famous for enterprise applications.
  Amazon Cognito, so it is going to provide identity and access management
  spring team also they developed a new project with the name Spring Authorization Server.
  which scenarios we need to use this grant type flow.
  two different backend servers, they are trying to communicate with each other.
  So in this communication, if you want to enforce security, then this is the perfect grant flow that we can use.
   leverage Keycloak to set up the auth server inside our Microservice network.
   We'll make our gateway server as a resource server
   The resource server are the gateway server is going to send the response only if it receives the proper
   access token from the client application that is issued by the auth server.
   So the client is going to request the auth server to issue an access token and in the same process the
   client application should prove its identity
   it is going to send the client credentials to the auth server saying that this is my client ID and this
   is my client secret.  client application is some other back end application or some other API
   my auth server receives the request and
   once it validated the credentials provided by the client application, it is going to issue an access   token to the client application.
   access token is received by the client application, the client application is going to send
   the same access token to the resource server. Along with the access token it will also convey which resource it is trying to access.
   if the client application has enough privileges to invoke that particular
   secure API or secure resource, then my resource server is going to respond to the client application. Your token is validated successfully.
   Here are the protected resources that you have requested,
   ext  API client who want to connect with my microservices behind the scenes, they need to work with the admins of the key clock to register themselves as a valid client application.
   Because the keyclock should not give access tokens for all type of external clients. Because the keyclock should not give access tokens for all type of external clients.
-e for environment variable , KEYCLOAK_ADMIN is username , start-dev = run in dev mode
So behind the scenes the keycloak is going to have some internal database using which we can store all the user credentials and the client credentials.

   https://www.keycloak.org/getting-started/getting-started-docker
   docker run -d -p 7080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:25.0.5 start-dev
http://localhost:7080/ ,  admin , admin
 like Keycloak realm is a boundary where you want to create set of client credentials or user credentials.
  like an environment. keycloak is going to provide a realm with the name master, but if needed, you can create more realms like dev, qa, prod.
So based upon your requirements because the end users are the clients, they are not going to use the same credentials across various environments.
login > create client > OpenID Connect,
client ID? So this is like username of my client application. ,Client authentication on we want our client to be authenticated itself with the auth server by providing its own credentials.
disable Standard flow (redirection url), Direct access grants (share creds) , enable Service accounts roles
for clien credentials, next> save
click on Credentials> view client secret,
my client application should know what is the endpoint URL that it has to invoke to get an access token.
go to realm setting , > go to endponts> OpenID Endpoint Configuration > click on link > and search token_endpoint
http://localhost:7080/realms/master/protocol/openid-connect/token grant_type is client_credentials,
fill client id, client secret, scope: openid email profile ,So these are the three scopes that my client application want the auth server to consider while issuing an access token.
in body select body.x-www-form-urlencoded
go to keycloack , click on clien> select client>  click client scopes> see default scopes
since we are following the OpenID Connect, you can see here the OpenID Connect is mentioned, which means by default, the OpenID scope will be provided for all the clients.
you get id_token  , becuase you mentioned openid in scope
go to jwt.io, and paste it in encoded section, iss: issuer, now paste the id token

in order to convert my gateway server as an OAuth2 resource server, I need to use this dependency which is spring-security-oauth2-resource-server.
And since we are using JWT related tokens, we need to make sure we are adding these spring security oauth2-jose dependency
oauth2ResourceServer(). So with this we are trying to convert our gateway server as an Oauth2 resource server.
because csrf protection is only needed when browsers are involved. Since in our scenario there are no browsers involved, we can disable this protection.
in application.yml
spring.security.oauth2.resourceserver.jwt.jwk.- set - url and
what is the auth server url using which my resource server can download the certificates during the startup of this resource server application.

During the startup of the resource server, it is going to connect with the resource server and it is going to download a public certificate from the Keycloak server.
Using this public certificate, my resource server can validate if a given access token is really issued by the Keycloak server.
The keycloak is going to have private certificates. Using the private certificates,the keycloak can only issue the new tokens, whereas with the help of this public certificate, any
server like resource server can validate if a given access token is valid or not.
in Authorization use oAuth2. token name: clientcredentails_accesstoken, grant type client_credentials
client id is bank-branch-cc, add other detail, client authentication : send client credentials in body only,
Get a New Access Token click on it, use , on left side: Add authorization data to request header ,
token auto populated,
Inside the auth server , go to client bank-branch-cc,
Since this client is an client which is following the client credentials grant type, that means this is also another application.
So in such scenarios we should not configure under roles, we should configure under service accounts role
click on Assign role> cancel
click on realm role>create role > accounts , LOAns , cards,
click on Assign role> filter by realm role> Accounts. assign
now generate a new token you will see ACCOUNTS in realms roles after decoding at jwt.io
 keycloak role converter because this class is going to help me to extract the roles that I'm getting from the keycloak into the format that spring security framework can understand.
  GrantedAuthority Is an interface available inside the spring security framework. Whenever we want to convey the role's information or privileged information, we need to make sure we are sending those details with these interface formats only.
  The purpose of this getClaims() method is it will give you access to the payload data available inside your access token.
  If you see here inside our access token, we have a key with the name realm_access.
  to assign these prefix role underscore because whenever we use this has_role method inside the spring security framework, internally it is going to use a prefix which is role underscore.
  check hasRole method
  this SimpleGrantedAuthority, there is a constructor which accepts the role name in the format of

  string and post that it is going to return the object of SimpleGrantedAuthority by using this role information.
setJwtGrantedAuthoritiesConverter which means I need to tell where I have written my logic to convert the roles present inside the JWT token into a granted authorities format.

if there is a UI application or a mobile application, there will be an associated end user who is trying to use that website or mobile application.
 we should use authorization code grant type flow
 Once the auth server validated the end user details, it is not immediately issuing an access token to the client application because it has to validate the client credentials as well.
 where the client application is trying to redirect the end user to the login page of the auth server. So in that process it has to send the what is a client Id but not the client secret,
  my auth server is going to alert the end user saying that you are about to share all your resources with so and so application.
  Please provide your consent. So to display that information the server need this client ID, so based upon the client ID, it is
  going to fetch all the client related details. Along with the client ID,
  my client application should also provide what is the redirect URL because once the end user is logged in successfully my auth server has to redirect the end user to a web page
  After redirect uri, my client application also should ask what are the scope details that it is trying to request from the auth server.
  This is very similar to what we have discussed inside the client credentials grant type flow.
  scope like read,  state variable. make sure there is no csrf attack happening in the authorization code grant type flow.
  cclient application should also send response type inside this response type It needs to mention
 a value code and this indicates to my auth server saying that that my client application is trying to follow the authorization code grant type flow.

 And as a response of this step two and step three, it is expecting an authorization code from the auth server.

 authorization code is received by my client application as part of step two and three in
 the Step five, the client application is going to make a one more request to the auth server to get an access token.
 So in this step five, first it is going to send the code that it has received in the previous step
 it should also send what is a client ID and client secret to prove its identity.
 Now, under the grant type, we should mention the value authorization code and redirect uri.
 https://www.oauth.com/playground/ select authrization code, open new tab for client details,
 and click continue in step 1: 1. Build the Authorization URL
 https://authorization-server.com/authorize?
   response_type=code
   &client_id=9SlSZg4iNxnXKR_GyALBAk-F
   &redirect_uri=https://www.oauth.com/playground/authorization-code.html
   &scope=photo+offline_access
   &state=MeWg-FKRpWMixnc-
  continue, enter use name and password: , The application "OAuth 2.0 Playground" would like the ability to access your photos.
  redirect to client ?state=MeWg-FKRpWMixnc-&code=EeJ7C7IzwzTjfJot3-ySa6BVHZKKR8g75PZTN8woZlZBa0YL
  when matched Now you're ready to exchange the authorization code for an access token.
  The client builds a POST request to the token endpoint with the following parameters:
 POST https://authorization-server.com/token
 grant_type=authorization_code
 &client_id=9SlSZg4iNxnXKR_GyALBAk-F
 &client_secret=MSi5Yao2yc_v_YCaT3N0mly1UwtOJzz4lA7DThmWp4ncGP3p
 &redirect_uri=https://www.oauth.com/playground/authorization-code.html
 &code=EeJ7C7IzwzTjfJot3-ySa6BVHZKKR8g75PZTN8woZlZBa0YL
 and get the reponse {
                       "token_type": "Bearer",
                       "expires_in": 86400,
                       "access_token": "1SYCtZu-HjAtJY5FD-9Zq7piEy-0ekA9vb9WchnCbe39MJrUqWg0CKz8dsctpq-wqq-HOd4H",
                       "scope": "photo offline_access",
                       "refresh_token": "_FNIxXx5i_3YC3BVsrtmqWVC"
                     }

Why can't my authorization server can issue an access token with a single request like we saw in the very first step,
the auth server will redirect the end user to the login page and it is going to issue an temporary authorization code using the same authorization code
Whereas with this flow, since there is browser or mobile application involved, there is a good chance
some hacker can be involved in the communication between the client application and auth server and he may steal the access token.
We have a grant flow with the name implicit grant type flow, which will get an access token within a single step.

So since the Gateway server is going to act as a resource server, my client application first redirect my end user to a login page of auth server.
So here the auth server that we are trying to use is Keycloak. The end user has to enter his credentials and post a successful authentication.
The keycloak is going to issue an authorization code to my web application and behind the scenes it is going to make a one more request to get an access token.
So using the same access token, my client application is going to forward the request to the Gateway server, which is acting as an edge server
The Gateway server as a next step, it will try to validate if the access token provided by the client application is valid or not by connecting with the keyclock.
 then it is going to forward request to the individual microservices.

 in keycloack create a new client > name: bank-branch-ac , ac means authorization code,
 enable Client authentication, select Standard flow , unselect all flow, in Valid redirect URIs
 valid redirect URL in ideal scenario, we should mention what is the URL that my auth server has to redirect the end user post successful authentication.
whatever valid redirect URL that your client application is going to send in the request, the same has to be configured here.
If we don't have this check, then hackers will redirect the access token to their own website, which is very danger.
* any redirect uri ,
under the web origins, I can mention Asterisk

The purpose of this web origins is, in real world, your client application may deploy in a different
domain and different port number, whereas auth server are your microservices might be deployed in a different domain and port number.
In such scenarios, the browsers will stop the communication between them by throwing an cors related error.
By default, it will stop the communication between two different domains and port numbers until unless the backend server is allowing.
So here I am configuring inside my auth server saying that please accept the request from cross domains as well
once done save, get client id and secret . create add user, username suyash, password 12345 save
Keycloak exposes a lot of REST APIs using these REST APIs,
So all the actions that an admin can do with the help of UI, all these actions are supported by REST API as well.
in postman select authroization type OAuth 2.0, token name: authcode_accesstoken, grant type Authorization Code,
add client id: bank-branch-ac,
call back url is the redirect url,
postman can redirect the end user to the login page of the keycloak. For the same, if you can see here, there is an option here like authorize using browser.
before clicking on get new access token , close the browser, and logout from keycloack
now after click login screen appear enter creds suyashs52@gmail.com 12345, it will redirect to
https://oauth.pstmn.io/v1/callback?
allow popup , click ok, go back to postman, authenticated, but 403 because no role assigned
in account service , in docker compose deleted the port mapping inside my docker compose file,
my account service is not going to be exposed to the outside world. same do for loans, cards,
gateway server. e I have created a new environment variable which is spring security Oauth2 Resource server JWT, JWK-SET-URI.
in gateway The service name is keycloak. And the port name, here I'm using 8080 but not the 7080.
7080 is the port which is exposed to the outside world.
Whereas since my gateway server is going to interact with the keycloak inside the Docker network directly
with the help of this service name, we need to mention what is the port number where the keycloak server started inside the Docker network.



















